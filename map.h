#ifndef MAP_INCLUDED
#define MAP_INCLUDED

#include <Arduino.h>

#define MAX_MAP_SIZE 576 // in bytes, corresponds to a 36 rooms

struct Level {
  int width;
  int height;
  int startRoom;
  byte dungeonMap[MAX_MAP_SIZE];
};

const Level dungeon1 = {3, 3, 0,
{ 
	B11111111,      
	B10000001,      
	B10000001,      
	B10000000,      
	B10000000,      
	B10000001,      
	B10000001,      
	B11100111,
	
	B11111111,
	B10000001,               
	B10000001,
	B00000000,
	B00000000,
	B10000001,
	B10000001,
	B11100111,
	
	B11111111,
	B10000001,
	B10000001,
	B00000001,
	B00000001,
	B10000001,
	B10000001,
	B11100111,
	
	B11100111,
	B10000001,
	B10000001,
	B10000000,
	B10000000,
	B10000001,
	B10000001,
	B11100111,
	
	B11100111,
	B10000001,
	B10000001,
	B00000000,
	B00000000,
	B10000001,
	B10000001,
	B11100111,
	
	B11100111,
	B10000001,
	B10000001,
	B00000001,
	B00000001,
	B10000001,
	B10000001,
	B11100111,
	
	B11100111,
	B10000001,
	B10000001,
	B10000000,
	B10000000,
	B10000001,
	B10000001,
	B11111111,
	
	B11100111,
	B10000001,
	B10000001,
	B00000000,
	B00000000,
	B10000001,
	B10000001,
	B11111111,
	
	B11100111,
	B10000001,
	B10000001,
	B00000001,
	B00000001,
	B10000001,
	B10000001,
	B11111111
} };

const Level dungeon2 = {4, 4, 0, 

{
	B11111111,
	B10000001,
	B10000001,
	B10000000,
	B10000000,
	B10000001,
	B10000001,
	B11100111,


	B11111111,
	B10000001,
	B10000001,
	B00000000,
	B00000000,
	B10000001,
	B10000001,
	B11100111,


	B11111111,
	B10000001,
	B10000001,
	B00000000,
	B00000000,
	B10000001,
	B10000001,
	B11100111,


	B11111111,
	B10000001,
	B10000001,
	B00000001,
	B00000001,
	B10000001,
	B10000001,
	B11100111,


	B11100111,
	B10000001,
	B10000001,
	B10000000,
	B10000000,
	B10000001,
	B10000001,
	B11100111,


	B11100111,
	B10000001,
	B10000001,
	B00000000,
	B00000000,
	B10000001,
	B10000001,
	B11100111,


	B11100111,
	B10000001,
	B10000001,
	B00000000,
	B00000000,
	B10000001,
	B10000001,
	B11100111,


	B11100111,
	B10000001,
	B10000001,
	B00000001,
	B00000001,
	B10000001,
	B10000001,
	B11100111,


	B11100111,
	B10000001,
	B10000001,
	B10000000,
	B10000000,
	B10000001,
	B10000001,
	B11100111,


	B11100111,
	B10000001,
	B10000001,
	B00000000,
	B00000000,
	B10000001,
	B10000001,
	B11100111,


	B11100111,
	B10000001,
	B10000001,
	B00000000,
	B00000000,
	B10000001,
	B10000001,
	B11100111,


	B11100111,
	B10000001,
	B10000001,
	B00000001,
	B00000001,
	B10000001,
	B10000001,
	B11100111,


	B11100111,
	B10000001,
	B10000001,
	B10000000,
	B10000000,
	B10000001,
	B10000001,
	B11111111,


	B11100111,
	B10000001,
	B10000001,
	B00000000,
	B00000000,
	B10000001,
	B10000001,
	B11111111,


	B11100111,
	B10000001,
	B10000001,
	B00000000,
	B00000000,
	B10000001,
	B10000001,
	B11111111,


	B11100111,
	B10000001,
	B10000001,
	B00000001,
	B00000001,
	B10000001,
	B10000001,
	B11111111 
} };


#endif


